<bsh>
    import android.app.Service;
    import android.content.Intent;
    import android.net.Uri;
    import android.provider.Contacts.People;
    import android.provider.Contacts.Phones;
    import android.content.ContentUris;
    import android.content.ContentValues;

    name = parameters.get("name");
    phone = parameters.get("phone");
    cellphone = parameters.get("cellphone");
    email = parameters.get("email");

    if (name != null && name.equals("") == false) {
        service = (Service) server.props.get("serviceContext");
        cv = new ContentValues();
        cv.put(android.provider.ContactsContract.RawContacts.ACCOUNT_TYPE, null);
        cv.put(android.provider.ContactsContract.RawContacts.ACCOUNT_NAME, null);
        Uri rawContactUri = service.getContentResolver().insert(android.provider.ContactsContract.RawContacts.CONTENT_URI, cv);
        Long rawContactId = ContentUris.parseId(rawContactUri);

        cv.clear();
        cv.put(android.provider.ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
        cv.put(android.provider.ContactsContract.Data.MIMETYPE, android.provider.ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);
        cv.put(android.provider.ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, name);
        service.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, cv);

        if (cellphone != null && cellphone.equals("") == false) {
            cv.clear();
            cv.put(android.provider.ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
            cv.put(android.provider.ContactsContract.Data.MIMETYPE, android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER, cellphone);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Phone.TYPE, Integer.valueOf(android.provider.ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE));
            service.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, cv);
        }

        if (phone != null && phone.equals("") == false) {
            cv.clear();
            cv.put(android.provider.ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
            cv.put(android.provider.ContactsContract.Data.MIMETYPE, android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER, phone);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Phone.TYPE, Integer.valueOf(android.provider.ContactsContract.CommonDataKinds.Phone.TYPE_HOME));
            service.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, cv);
        }

        if (email != null && email.equals("") == false) {
            cv.clear();
            cv.put(android.provider.ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
            cv.put(android.provider.ContactsContract.Data.MIMETYPE, android.provider.ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Email.ADDRESS, email);
            cv.put(android.provider.ContactsContract.CommonDataKinds.Email.TYPE, Integer.valueOf(android.provider.ContactsContract.CommonDataKinds.Email.TYPE_OTHER));
            service.getContentResolver().insert(android.provider.ContactsContract.Data.CONTENT_URI, cv);
        }

        print("[{\"success\" : true}]");
    } else {
        print("[{\"success\" : false}]");
    }

</bsh>